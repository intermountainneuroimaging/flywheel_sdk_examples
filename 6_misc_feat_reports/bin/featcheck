#!/bin/bash
# Author: Luka Ruzic
# 01-16-2014 KLP use /bin/flirt instead of full FSL4 path
#                use /bin/featregapply instead of full FSL4 path

# this should/can contain all the command lineable tests of a FEAT analysis

### exit codes
EXIT_OK=0
EXIT_PROBS=1
EXIT_INCOMPLETE=3
EXIT_DNE=4

usage() {
    {
	echo "University of Colorado, Boulder (Banich lab)"
	echo "Usage: featcheck <analysis.(g)feat|design.fsf>"
	echo "Options:"
	echo "    -q (previously -s)"
	echo "        quick mode   (0: no problems found, n: n problems found, -1: uncompleted)"
	echo "Description:"
	echo "    reports on/checks for the following in a FEAT analysis:"
	echo "       - completion"
	echo "       - running time"
	echo "       - size"
	echo "       - completion of registrations"
	echo "       - the strings \"error\" and \"warning\" in log files"
	echo "       - existence of zstats"
	echo "       - uniform dimensions of images produced"
	echo "       - jobs that did not exit cleanly (only works for recently run jobs)"
	echo
	echo "Exit codes:"
	echo "  ${EXIT_OK}: no problems found"
	echo "  ${EXIT_PROBS}: problems found"
	echo "  ${EXIT_INCOMPLETE}: target analysis is incomplete"
	echo "  ${EXIT_DNE}: target analysis does not exist"
    } >&2

    exit 1
}

# function to facilitate a silent mode (always check silence setting before echoing)
# note that this doesn't always get the job done (there are some "[ ! $SILENT ] && printf ..." statements in the rest of the code)
schmecho() {
    [ ! $SILENT ] && echo $*
}

# small function to parse designs where fsfinfo won't get what's desired
fsf_read() {
    if [ $1 == "-d" ]; then
        d=$2
        shift 2
    else
        d=$ANALYSIS/design.fsf
    fi
    
    awk '$1=="set" && $2 ~ /'"$1"'/ {print $3}' $d | sed -e 's|"$||' -e 's|^"||'
}

# small function to process problems found
problem() {
    let problems+=$1
    shift
    schmecho "***PROBLEM*** $*"
}

### PARSE ARGUMENTS
while [ $1 ]; do    
    if [[ "$1" =~ \.g{0,1}feat/{0,1}$ ]]
    then  # argument is a .gfeat or .feat to check (ignore a trailing /, since autocomplete will put that there)
	ANALYSIS=$1
	shift
    elif [[ "$1" =~ \.fsf$ ]]
    then  # argument is a design file: find the output feat and check it
	ANALYSIS=`fsfinfo -o $1`
	shift
    elif [ $1 == "-q" ]||[ $1 == "-s" ]; then     # "-s" is old (removed from usage, but kept in play for compatibility)
	SILENT=set
	shift
    else
	echo "UNRECOGNIZED OPTION: $1"
	usage
    fi
done

### ERROR CHECKING
if [ ! $ANALYSIS ]; then echo "NO ANALYSIS SPECIFIED"; usage; fi
if [ ! -d $ANALYSIS ]; then
    echo "ERROR: no such directory as $ANALYSIS" >&2
    exit $EXIT_DNE
fi


### TESTS
# test for completion
#   when an analysis completes, "Finished" is printed to report.html
if [ `grep -ci finished $ANALYSIS/report.html` -eq 0 ]; then
    schmecho "$ANALYSIS has not completed"
    [ $SILENT ] && echo "-1"
    exit $EXIT_INCOMPLETE
fi

# set what type of analysis is being dealt with (lower(1) vs higher(2))
[ `fsfinfo -t $ANALYSIS` -eq 1 ] && LOWER=set

# report runtime
#   compare the time stamps for Finished and Started from the report.html and report_log.html files
#   convert the time stamps to absolute number of seconds since the 1st of the month
#   subtract them to find running time and divide by 60 to report minutes
#   NOTE: this will fail on analyses running during the first midnight of the month.
runningtime=`awk '/Finished/ {split($6,f,":"); finish=($5*24*60*60)+(60*60*f[1])+(60*f[2])+f[3]}
                  /Started/ {split($6,s,":"); start=($5*24*60*60)+(60*60*s[1])+(60*s[2])+s[3]}
                  END {print (finish-start)/60}' $ANALYSIS/report*`
[ ! $SILENT ] && printf "Completed in %.2f minutes\n" $runningtime

# report size (disk usage)
schmecho size: `/usr/bin/du -h --max-depth 0 $ANALYSIS | awk '{print $1}'`

# registration stage
if [ $LOWER ]; then
###    if [ `grep -cE "^/usr/share/fsl/bin/flirt" $ANALYSIS/report_log.html` -eq 0 ]
    if [ `grep -c "bin/flirt" $ANALYSIS/report_log.html` -eq 0 ]
    then  # FLIRT was never used (always assume full analyses)
	problem 1 "registration not done"
    fi
else # HIGHER
    # check to that there is one featregapply command in the log for each unique lower level analysis
    for input in $(for i in $(fsfinfo -i $ANALYSIS); do echo ${i%/}; done | sort | uniq); do
###	if [ `grep -c "/usr/share/fsl/bin/featregapply $input" $ANALYSIS/report_log.html` -eq 0 ]; then
	if [ `grep -c "bin/featregapply $input" $ANALYSIS/report_log.html` -eq 0 ]; then
	    problem 1 "registration not done for $input"
	fi
    done
fi

# look for errors in logs
#   look for strings "error" or "warning" (case insensitive) in the reports/logs
#   ignore lines with "empty mask image" warnings
#   ignore lines in which custom timing filenames are printed (want to avoid printing EVs like "EV/errors.txt")
error_or_warning="`grep -iE 'error|warning' $ANALYSIS/report*.html | grep -viE 'href=|empty mask image|mkdir -p custom_timing_files'`"
if [ "$error_or_warning" ]; then
    problem 1 "in $ANALYSIS/report_log.html:"
    [ $SILENT ] || echo "  "$error_or_warning
fi

# check exit statuses
#   get job IDs from log of feat1 script
for j in `grep -Ev '[^0-9]|^$' $ANALYSIS/logs/feat1`; do
    # attempt to get report from SGE's qacct
    w="$(qacct -j $j 2>&1)"

    if [[ "$w" =~ "job id "[0-9]*" not found" ]]
    then  # qacct report cannot find this job (it's too old)
	schmecho "notice: jobs too old to check exit statuses with qacct (cannot ensure jobs exited cleanly)"
	# assume that the other jobs are also too old and don't even check them
	break
    fi

    # print job name and exit status IF non-zero exit status is found
    w="$(echo $w | awk '$1 == "jobname" {n=$2} $1 == "exit_status" {e=$2} END {if (e) print "job "n" had non-zero exit status "e }')"
    [ "$w" ] && problem 1 $w
done

# look for zstats
# zstats are among the final products of an analysis
#   if something goes wrong, they often won't be produced
if [ $LOWER ]; then
    # look for all zstats predicted by the design (1 for each real contrast), and test with FSL's imtest
    lower_ncon_real=`fsf_read ncon_real`
    for ((z=1;z<=lower_ncon_real;z++)); do
	let n++
	[ `imtest $ANALYSIS/stats/zstat$z` -ne 1 ] && zerr[n]="zstat$z"
    done
    if [ "${zerr[*]}" ]
    then  # there are errors; print "all #" if all are missing, and which are missing if only some are 
	[ "${#zerr[*]}" -eq $n ] && problem ${#zerr[*]} "bad/missing zstats: all (${#zerr[*]})" || problem ${#zerr[*]} "bad/missing zstats: ${zerr[*]}"
    fi
else  # HIGHER
    # find number of inputs, cope.feat or cope.nii.gz, and loop through them
    [ `fsf_read inputtype` -eq 1 ] && ncopeinputs=`fsf_read ncopeinputs` || ncopeinputs=1      # is this right?  we don't usually use cope.nii.gz as input, but is it safe to assume that there's only 1 in those cases?
    for ((c=1;c<=ncopeinputs;c++)); do
	if [ `fsf_read inputtype` -eq 2 ]||[ `fsf_read "copeinput\.${c}\)"` -eq 1 ]
	then  # input is cope.nii.gz OR the selected cope input is switched on
	    # loop through all the contrasts for that cope and check with FSL's imtest
	    lower_ncon_real=`fsf_read ncon_real`
	    for ((z=1;z<=lower_ncon_real;z++)); do
		if [ `fsf_read "conpic_real\.$z\)"` -eq 1 ]
		then  # not actually sure what this is for... might only relate to the documentation/htmls?
		    let n++
		    [ `imtest $ANALYSIS/cope$c.feat/stats/zstat$z` -ne 1 ] && zerr[n]="cope$c/zstat$z"
		fi
	    done
	fi
    done
    if [ "${zerr[*]}" ]
    then  # there are errors: print "all #" if all are missing, and which are missing if only some are
	[ "${#zerr[*]}" -eq $n ] && problem ${#zerr[*]} "bad/missing zstats: all (${#zerr[*]})" || problem ${#zerr[*]} "bad/missing zstats: ${zerr[*]}"
    fi	
fi

# check for consistency of image dimensions (higher levels only)
# find all NIfTI images, check for more than one unique set of dimensions
[ `fsfinfo -t $ANALYSIS` -eq 2 ]&&[ `find $ANALYSIS -name '*.nii.gz' | xargs lsi | awk '{print $2,$3,$4}' | sort -n | uniq | wc -l` -gt 1 ] && problem 1 "inconsistent image dimensions"	


### FINISH UP
# determine exit status based on presence or absence of problems
[ $problems ] && EXIT_CODE=$EXIT_PROBS || EXIT_CODE=$EXIT_OK
if [ $SILENT ]
then # in silent mode simply print the number of problems
    echo ${problems:-0}
else # print message
    [ $problems ] && echo ${problems} PROBLEMS FOUND || echo A-OK!
fi

exit $EXIT_CODE
